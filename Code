import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.multioutput import MultiOutputClassifier
from sklearn.metrics import roc_auc_score

# Load the datasets
submission_format = pd.read_csv(r"D:\Downloads\hackathon\submission_format.csv")
test_set_features = pd.read_csv(r"D:\Downloads\hackathon\test_set_features.csv")
training_set_features = pd.read_csv(r"D:\Downloads\hackathon\training_set_features.csv")
training_set_labels = pd.read_csv(r"D:\Downloads\hackathon\training_set_labels.csv")

# Inspect the data
print("Submission Format:")
print(submission_format.head())
print("\nTest Set Features:")
print(test_set_features.head())
print("\nTraining Set Features:")
print(training_set_features.head())
print("\nTraining Set Labels:")
print(training_set_labels.head())


from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.impute import SimpleImputer

# Merge training features and labels
train_data = pd.merge(training_set_features, training_set_labels, on='respondent_id')
print("Training_data: ", train_data.head())

# Check for null values
submission_format.isnull().values.any()

test_set_features.isnull().values.any()

# Check for null values
null_values = test_set_features.isnull().sum()
print("Null values in each column:")
print(null_values)

# Check if there are any null values in the entire dataset
any_null = test_set_features.isnull().values.any()
print("Are there any null values in the dataset?", any_null)

train_data.isnull().values.any()

# Check for null values
null_values = train_data.isnull().sum()
print("Null values in each column:")
print(null_values)

# Check if there are any null values in the entire dataset
any_null = train_data.isnull().values.any()
print("Are there any null values in the dataset?", any_null)

# Impute missing values
imputer_num = SimpleImputer(strategy='mean')
imputer_cat = SimpleImputer(strategy='most_frequent')

# List of categorical features
categorical_features = ['age_group', 'education', 'race', 'sex', 'income_poverty', 
                        'marital_status', 'rent_or_own', 'employment_status', 
                        'hhs_geo_region', 'census_msa', 'employment_industry', 
                        'employment_occupation']

# Separate numerical and categorical features
numerical_features = train_data.columns.difference(categorical_features + ['respondent_id', 'xyz_vaccine', 'seasonal_vaccine'])

# Impute numerical features
train_data[numerical_features] = imputer_num.fit_transform(train_data[numerical_features])
test_set_features[numerical_features] = imputer_num.transform(test_set_features[numerical_features])

# Impute categorical features
train_data[categorical_features] = imputer_cat.fit_transform(train_data[categorical_features])
test_set_features[categorical_features] = imputer_cat.transform(test_set_features[categorical_features])

# Encode categorical variables
for feature in categorical_features:
    le = LabelEncoder()
    train_data[feature] = le.fit_transform(train_data[feature])
    test_set_features[feature] = le.transform(test_set_features[feature])

# Scale numerical features if necessary
scaler = StandardScaler()
train_data[numerical_features] = scaler.fit_transform(train_data[numerical_features])
test_set_features[numerical_features] = scaler.transform(test_set_features[numerical_features])

# Split the data into features and target variables
X_train = train_data.drop(['respondent_id', 'xyz_vaccine', 'seasonal_vaccine'], axis=1)
y_train = train_data[['xyz_vaccine', 'seasonal_vaccine']]

# Initialize the model
model = MultiOutputClassifier(RandomForestClassifier(random_state=42))

# Train the model
model.fit(X_train, y_train)

# Train the model
model.fit(X_train, y_train)

# Evaluate the model on training data
y_train_pred_proba = model.predict_proba(X_train)
roc_auc_xyz = roc_auc_score(y_train['xyz_vaccine'], y_train_pred_proba[0][:, 1])
roc_auc_seasonal = roc_auc_score(y_train['seasonal_vaccine'], y_train_pred_proba[1][:, 1])

print(f'ROC AUC score for xyz_vaccine: {roc_auc_xyz}')
print(f'ROC AUC score for seasonal_vaccine: {roc_auc_seasonal}')
print(f'Mean ROC AUC score: {(roc_auc_xyz + roc_auc_seasonal) / 2}')

# Predict probabilities for the test set
y_test_pred_proba = model.predict_proba(test_set_features.drop('respondent_id', axis=1))

# Prepare the submission file
submission = pd.DataFrame({
    'respondent_id': submission_format['respondent_id'],
    'xyz_vaccine': y_test_pred_proba[0][:, 1],
    'seasonal_vaccine': y_test_pred_proba[1][:, 1]
})


# Save the submission file
submission.to_csv('submission.csv', index=False)

